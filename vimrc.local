" ================ Persistent Undo ==================
" Keep undo history across sessions, by storing in file.
" Only works all the time.
if has('persistent_undo')
  silent !mkdir ~/.vim/backups > /dev/null 2>&1
  set undodir=~/.vim/backups
  set undofile
endif

" ================ Copy and pasting ========================
set clipboard=unnamed

" ================ Appearance ========================
colorscheme solarized
set background=dark
if has('gui_running')
    set background=dark
else
    set background=dark
endif

if has("gui_gtk2")
  set guifont=Inconsolata\ XL\ 12,Inconsolata\ 15,Monaco\ 12
else
  set guifont=Inconsolata\ XL:h17,Inconsolata:h20,Monaco:h17
end

let g:Powerline_theme='short'
let g:Powerline_colorscheme='solarized256_dark'

" ================ Key Maps ========================
let mapleader = ","
" Cmd-Shift-N for nerd tree
nmap <D-N> :NERDTreeToggle<CR>
nmap <Leader>nt :NERDTreeToggle<CR>
nmap <Leader>n :NERDTreeFind<CR>

" ================ CtrlP ========================
let g:ctrlp_map = ',t'
nnoremap <silent> ,t :CtrlP<CR>

" Additional mapping for buffer search
nnoremap <silent> ,b :CtrlPBuffer<cr>

" Cmd-Shift-P to clear the cache
nnoremap <silent> <D-P> :ClearCtrlPCache<cr>
map ,ja :CtrlP vendor/spree/api<CR>
map ,jb :CtrlP vendor/spree/backend<CR>
map ,jc :CtrlP vendor/spree/core<CR>
map ,jf :CtrlP vendor/spree/frontend<CR>
map ,jF :CtrlP vendor/spree/core/lib/spree/testing_support/factories<CR>


" ================ Indentation ========================
"  Display tabs and trailing spaces visually
set list listchars=tab:\ \ ,trail:Â·

set nowrap       "Don't wrap lines
set linebreak    "Wrap lines at convenient points


" ================ Running Specs ========================
"let g:rspec_command = "./spec {spec}"
"let g:rspec_command = "Dispatch ./spec {spec}"
" If you have issues then reset slime by
" unlet g:tslime
let g:rspec_command = 'call Send_to_Tmux("./spec {spec}\n")'
"let g:rspec_runner = "os_x_iterm2"


" ================ Syntastic ========================
"let g:syntastic_ruby_checkers = ['mri','rubocop']
let g:syntastic_ruby_checkers = ['mri']
let g:syntastic_ruby_mri_exec = '/usr/local/bin/ruby'
let g:syntastic_mode_map = { 'passive_filetypes': ['sass', 'scss']  }
nnoremap <Leader>rc :SyntasticCheck rubocop<CR>
nnoremap <Leader>wrc :w<CR> :SyntasticCheck rubocop<CR>
let g:vimrubocop_keymap = 0
nnoremap <Leader>ra :RuboCop -a<CR>

" ================ Search  ========================
function! GetVisual()
  let reg_save = getreg('"')
  let regtype_save = getregtype('"')
  let cb_save = &clipboard
  set clipboard&
  normal! ""gvy
  let selection = getreg('"')
  call setreg('"', reg_save, regtype_save)
  let &clipboard = cb_save
  return selection
endfunction

"grep the current word using K (mnemonic Kurrent)
nnoremap <silent> K :Ag <cword><CR>

"grep visual selection
vnoremap K :<C-U>execute "Ag " . GetVisual()<CR>

"grep current word up to the next exclamation point using ,K
nnoremap ,K viwf!:<C-U>execute "Ag " . GetVisual()<CR>

"grep for 'def foo'
nnoremap <silent> ,gd :Ag 'def <cword>'<CR>

",gg = Grep! - using Ag the silver searcher
" open up a grep line, with a quote started for the search
nnoremap ,gg :Ag ""<left>

"Grep Current Partial
function! AgCurrentPartial()
  let l:fileNameWithoutExtension = expand('%:t:r')
  let l:fileNameWithoutUnderscore = substitute(l:fileNameWithoutExtension, '^_','','g')
  let l:grepPattern = "render.*[\\\'\\\"].*" . l:fileNameWithoutUnderscore . "[\\\'\\\"]$"
  exec 'Ag "' . l:grepPattern . '"'
endfunction

command! AgCurrentPartial call AgCurrentPartial()
"
nnoremap ,gcp :AgCurrentPartial<CR>

"Grep for usages of the current file
nnoremap ,gcf :exec "Ag " . expand("%:t:r")<CR>

"Enable syntax highlight for flow
let g:javascript_plugin_flow = 1
